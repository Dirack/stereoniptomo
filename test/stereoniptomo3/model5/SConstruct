#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Python3)
# 
# Purpose: Full velocity inversion with NIP tomography.
# Velocity model with plane interfaces.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 31/01/2022
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

# Madagascar Package
from rsf.proj import *

# Madagascar Recipes
from rsf.recipes.pefInterpolation import pefInterpolation as pef
from rsf.recipes.kimodel import multiLayerModelBuild as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod
from rsf.recipes.utils import arr2str

# Main Files
trueModel='trueModel'
stackedSection='stackedSection'
parametersCube='parametersCube'
interpolatedDataCube='interpolatedDataCube'

# Original velocity model
xmax = 6.0
zmax = 4.0

layers = ((1.00,1.10,0.90,1.00),
          (1.5,1.40,1.45,1.65),
          (1.85,1.85,1.85,1.85))

velocities = (1.508,
              1.690,
              1.750,
              2.0)

### Modeling ###

# Generate multi layer model
mlmod(interfaces='interfaces',
        dipsfile='interfacesDip',
        modelfile=trueModel,
        xmax=xmax,
        zmax=zmax,
        layers=layers,
        velocities=velocities)

# plot the original velocity model
Result(trueModel,
	'''
	grey color=j scalebar=y label1=Depth unit1=km
	label2=Position unit2=km barlabel=Velocity barunit=km/s
	barreverse=y title="Velocity Model - Plane Interfaces" allpos=yi bias=1.0
	''')

# VFSA Parameters
v0 = float(ARGUMENTS.get('v0',1.5))
ot0 = float(ARGUMENTS.get('ot0',1.0))
dt0 = float(ARGUMENTS.get('dt0',0.008))
nt0 = int(ARGUMENTS.get('nt0',251))
om0 = float(ARGUMENTS.get('om0',1.5))
dm0 = float(ARGUMENTS.get('dm0',0.025))
nm0 = int(ARGUMENTS.get('nm0',121))
aperture = int(ARGUMENTS.get('aperture',30))
cds = bool(ARGUMENTS.get('cds',False))

### velocity inversion using NIP tomography ###

ni = int(ARGUMENTS.get('ni',1)) # Number of iterations in inversion loop
nit = int(ARGUMENTS.get('nit',100)) # Number of iterations in tomography
nitf = int(ARGUMENTS.get('nitf',2)) # Number of interfaces
model = 'model_0' # Constant velocity model

# Traveltime picking
#Flow('pick0.txt',stackedSection,'ipick')
#Flow('pick1.txt',stackedSection,'ipick')
#Flow('pick.txt',['pick0.txt','pick1.txt','pick2.txt'],'/usr/bin/cat $SOURCES')

minvel=[1.5,1.60,1.7,2.0]
maxvel=[1.51,2.,2.,2.5]
tryvel=[1.5,1.62,1.8,2.0]

Flow('sz_2',None,'math output="1." n1=21 d1=0.5 o1=-2')
sz='sz_2'

Flow('constv',None,'math output="%g" n1=301 n2=1001 d1=0.01 d2=0.01 o2=-2 o1=0' % tryvel[0])
model='constv'
sv='sv_2'

Flow('sv_2.asc',None,
	'''
	echo 1.45 n1=1 data_format=ascii_float in=${TARGETS[0]}
	''')

# Layer's velocity
Flow(sv,'sv_2.asc',
	'''
	dd type=float form=native
	''')

# Generate multi layer model
mlmod(interfaces='interfaces',
        dipsfile='interfacesDip',
        modelfile=trueModel,
        xmax=xmax,
        zmax=zmax,
        layers=layers,
        velocities=velocities)

picks=[]
for i in range(3):
	Flow('pick'+str(i)+'.txt',stackedSection,'ipick')
	picks.append('pick'+str(i)+'.txt')
	files=['t0s'+str(i),'m0s'+str(i)]
	k=1
	for f in files:
		Flow(f+'.asc','pick'+str(i)+'.txt',
		'''
		./ascFormat.sh ${TARGETS} %d
		''' % k)

		Flow(f,f+'.asc','dd type=float form=native | put n2=1 d2=1 o2=0')
		k=k+1

	files=['rns'+str(i),'rnips'+str(i),'betas'+str(i)]
	k=0
	for f in files:
		Flow(f,[parametersCube,'t0s'+str(i),'m0s'+str(i)],
		'''
		window n3=1 f3=%d |
		getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]}
		''' %k)
		k=k+1

	# Generate shotsfile and anglefile for NIP sources
	Flow('s2'+str(i),'m0s'+str(i),'spike mag=0')

	Flow('shotsfile'+str(i),['s2'+str(i),'m0s'+str(i)],'rcat ${SOURCES[1]} axis=2 | transp')

	Flow('anglefile'+str(i),[parametersCube,'t0s'+str(i),'m0s'+str(i)],
		'''
		window n3=1 f3=2 |
		getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]} beta=y
		''')

	
	#Flow('constv'+str(i),None,'math output="%g" n1=301 n2=1001 d1=0.01 d2=0.01 o2=-2 o1=0' % tryvel[i])


	t0s='t0s'+str(i)
	m0s='m0s'+str(i)
	betas='betas'+str(i)
	rnips='rnips'+str(i)
	shotsfile='shotsfile'+str(i)
	#anglefile='anglefile'+str(i)
	#model = 'constv'+str(i)

	velinv = 'modelinv_%d' % i
	vspline = 'vspline_%d' % i
	zspline = 'zspline_%d' %i
	if(i==0):
		first='y'
	Flow([velinv,vspline,zspline],[model,t0s,m0s,rnips,betas,sv,interpolatedDataCube,shotsfile,sz],
	    '''
	    stereoniptomo3 t0s=${SOURCES[1]} m0s=${SOURCES[2]} rnips=${SOURCES[3]} betas=${SOURCES[4]} sv=${SOURCES[5]} vspline=${TARGETS[1]} data=${SOURCES[6]} shotsfile=${SOURCES[7]} sz=${SOURCES[8]} zspline=${TARGETS[2]} v0=1.508 nit=%d c0=0.2 temp0=2 minvel=%g maxvel=%g first=%s
	    ''' % (nit,minvel[i],maxvel[i],first))

	model = velinv
	sv = vspline
	sz = zspline
	first = 'n'

### Basement ####
Flow('svv.asc',None,
	'''
	echo 2. n1=1 data_format=ascii_float in=${TARGETS[0]}
	''')

# Layer's velocity
Flow('svv','svv.asc',
	'''
	dd type=float form=native
	''')

Flow(['velinv_res','vspline_res','zspline_res'],[model,t0s,m0s,rnips,betas,'svv',interpolatedDataCube,shotsfile,sz],
	    '''
	    stereoniptomo3 t0s=${SOURCES[1]} m0s=${SOURCES[2]} rnips=${SOURCES[3]} betas=${SOURCES[4]} sv=${SOURCES[5]} vspline=${TARGETS[1]} data=${SOURCES[6]} shotsfile=${SOURCES[7]} sz=${SOURCES[8]} zspline=${TARGETS[2]} v0=1.508 nit=%d c0=0.2 temp0=2 base=y first=n
	    ''')

velinv = 'velinv_res'

### Plot results ####
Flow('pick.txt',picks,'/usr/bin/cat $SOURCES')
files=['t0s','m0s']
i=1
for f in files:
	Flow(f+'.asc','pick.txt',
	'''
	./ascFormat.sh ${TARGETS} %d
	'''%i)

	Flow(f,f+'.asc','dd type=float form=native | put n2=1 d2=1 o2=0')
	i=i+1

files=['rns','rnips','betas']
i=0
for f in files:
	Flow(f,[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=%d |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]}
	''' %i)
	i=i+1

# Generate shotsfile and anglefile for NIP sources
Flow('s2','m0s','spike mag=0')

Flow('shotsfile',['s2','m0s'],'rcat ${SOURCES[1]} axis=2 | transp')

Flow('anglefile',[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=2 |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]} beta=y
	''')

# NIP model setup after velocity model inversion,
# ray-tracing from acquisition surface to NIP sources
Flow(['ray2','nipangles2'],[velinv,'shotsfile','anglefile','t0s'],
        '''
        nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]} | dd type=complex
        ''')

Flow('result','ray2','sfdd type=float')

# Plot inverted velocity model with NIP sources
Plot('velocityModel',velinv,
	'''
	grey color=j scalebar=y barreverse=y bias=1.508 title="Inverted velocity model" barlabel="Velocity" barunit="Km/s" min2=1 max2=5
	''')

Plot('inverted-nipsources','ray2','sfgraph scalebar=y symbol=+ transp=y yreverse=y max1=3 min1=0 min2=1 max2=5 wanttitle=n wantaxis=n plotcol=7 symbolsz=10')

Plot('inverted-interfaces',['velocityModel','inverted-nipsources'],'Overlay')

# Plot original velocity model
Plot('mod1',trueModel,
	'''
	put label1=Depth unit1=Km label2=Position unit2=Km |
	grey color=j scalebar=y barreverse=y bias=1.508 title="Original velocity model" barlabel="Velocity" barunit="Km/s" min1=0 max1=3 min2=1 max2=5
	''')

Plot('mod1-img',['mod1','inverted-nipsources'],'Overlay')

# Plot result: Inverted and original models side by side
Result('inverted-original',['inverted-interfaces','mod1-img'],'SideBySideIso')

Plot('reference',None,'math output="1.5" n1=300 d1=0.01 o1=0 | graph max1=3 min1=0 max2=2.5 min2=1.4 plotcol=3 yreverse=y transp=y wantaxis=n dash=1')

Plot('velnodes',vspline,'put o1=0 d1=0.5 | graph max1=3 yreverse=y min2=1.4 max2=2.5 min1=0 symbol=+ symbolsz=10 plotcol=2 transp=y wantaxis=n')

Plot('trueProfile',trueModel,'window n2=1 f2=0 | graph yreverse=y min1=0 max1=3 max2=2.5 min2=1.4 transp=y')

Plot('invProfile',velinv,'window n2=1 f2=0 | graph yreverse=y min1=0 max1=3 max2=2.5 min2=1.4 plotcol=1 wantaxis=n transp=y')

Result('profile',['reference','trueProfile','velnodes','invProfile'],'Overlay')

End()
